C51 COMPILER V9.53.0.0   POWER                                                             11/13/2019 15:40:30 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN .\src\power.OBJ
COMPILER INVOKED BY: d:\simplicitystdio\developer\toolchains\keil_8051\9.53\BIN\C51.exe E:\elmos1_beetest\src\power.c OM
                    -F2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCD
                    -IR(E:\elmos1_beetest\inc;D:/simplicitystdio/developer/sdks/si8051/v3//Device/shared/si8051Base;D:/simplicitystdio/develo
                    -per/sdks/si8051/v3//Device/EFM8SB1;D:/simplicitystdio/developer/sdks/si8051/v3//Device/EFM8SB1/inc) PRINT(.\src\power.ls
                    -t) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\power.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // power.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // Driver for the power management function.
  10          //
  11          // Target:         EFM8SB1
  12          // Tool chain:     Generic
  13          // Command Line:   None
  14          //
  15          // Release 1.0 (BL)
  16          //    - Initial Release
  17          //    - 9 JAN 2015
  18          //
  19          // Release 1.0
  20          //    - Initial Revision (FB)
  21          //    - 19 MAY 2010
  22          //
  23          
  24          //-----------------------------------------------------------------------------
  25          // Includes
  26          //-----------------------------------------------------------------------------
  27          #include "SI_EFM8SB1_Register_Enums.h"
  28          #include "smartclock.h"                // RTC Functionality
  29          #include "power.h"                     // Power Management Functionality
  30          
  31          //-----------------------------------------------------------------------------
  32          // Global Variables
  33          //-----------------------------------------------------------------------------
  34          
  35          // Variables used for the RTC interface
  36          //uint8_t PMU0CF_Local;                       // Holds the desired Wake-up sources
  37           
  38          // Define Wake-Up Flags
  39          /*uint8_t RTC_Alarm;
  40          uint8_t RTC_Failure;
  41          uint8_t Comparator_Wakeup;
  42          uint8_t Port_Match_Wakeup;*/
  43          
  44          //-----------------------------------------------------------------------------
  45          // Function PROTOTYPES
  46          //-----------------------------------------------------------------------------
  47          //void LPM(uint8_t mode);
  48          //void LPM_Init(void);
  49          //void LPM_Enable_Wakeup (uint8_t wakeup);
  50          //void LPM_Disable_Wakeup (uint8_t wakeup);
  51          
  52          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   POWER                                                             11/13/2019 15:40:30 PAGE 2   

  53          // LPM_Init ()
  54          //-----------------------------------------------------------------------------
  55          //
  56          // Return Value : None
  57          // Parameters   : None
  58          //
  59          // This function will initialize the low power functionality
  60          //
  61          //-----------------------------------------------------------------------------
  62          /*void LPM_Init (void)
  63          {
  64            PMU0CF = CLEAR;
  65            PMU0CF_Local = 0;
  66            //RTC_Alarm = 0;
  67           //RTC_Failure = 0;
  68           // Comparator_Wakeup = 0;
  69           // Port_Match_Wakeup = 0;
  70            P2MDOUT |= 0x01;
  71          }*/
  72          
  73          //-----------------------------------------------------------------------------
  74          // LPM_Enable_Wakeup ()
  75          //-----------------------------------------------------------------------------
  76          //
  77          // Return Value : None
  78          // Parameters   : None
  79          //
  80          // This function will enable wakeup sources
  81          //
  82          //-----------------------------------------------------------------------------
  83          /*void LPM_Enable_Wakeup (uint8_t wakeup)
  84          {
  85            PMU0CF_Local |= (wakeup & (RTC | PORT_MATCH | COMPARATOR));
  86                  //PMU0CF_Local |= (wakeup );
  87          }*/
  88          
  89          //-----------------------------------------------------------------------------
  90          // LPM_Disable_Wakeup ()
  91          //-----------------------------------------------------------------------------
  92          //
  93          // Return Value : None
  94          // Parameters   : None
  95          //
  96          // This function will disable wakeup sources
  97          //
  98          //-----------------------------------------------------------------------------
  99          /*void LPM_Disable_Wakeup (uint8_t wakeup)
 100          {
 101            PMU0CF_Local &= ~(wakeup & (RTC | PORT_MATCH | COMPARATOR));
 102          }*/
 103          
 104          //-----------------------------------------------------------------------------
 105          // LPM
 106          //-----------------------------------------------------------------------------
 107          //
 108          // Return Value : none
 109          // Parameters   : 1) uint8_t mode -- can be SLEEP or SUSPEND
 110          //
 111          // This function places the device in a low power mode
 112          //
 113          //-----------------------------------------------------------------------------
 114          /*void LPM(uint8_t mode)
 115          {
C51 COMPILER V9.53.0.0   POWER                                                             11/13/2019 15:40:30 PAGE 3   

 116             uint8_t b;
 117             uint8_t CLKSEL_save;
 118             uint8_t EA_save;
 119             uint8_t PMU0CF_snapshot;
 120             uint8_t RTC0CN0_snapshot;
 121             uint8_t IP_save;
 122             
 123             // Save current interrupt state and disable interrupts 
 124             EA_save = IE_EA;
 125             IE_EA = 0;
 126             IP_save = IP;
 127             
 128             // Save current system clock selection and select the low power oscillator
 129             // divided by 2 as the system clock
 130             CLKSEL_save = CLKSEL;
 131             CLKSEL = 0x14;
 132             
 133             // Enable the Flash read one-shot timer   
 134             FLSCL &= ~BYPASS;                   // Clear the one-shot bypass bit
 135             IP  =   NON_ZERO;                 // Write a "dummy" value to IP for a 3-byte
 136                                               // instruction
 137          
 138             // Verify that the system clock setting has been applied
 139             while(!(CLKSEL & 0x80));            // Wait until CLKRDY -> 1
 140             
 141             //----------------------------------
 142             // ~~~ Device in Low Power Mode ~~~
 143             //
 144                 PMU0CF = (mode | PMU0CF_Local);
 145             //
 146             // ~~~   Device is now Awake    ~~~
 147             //----------------------------------
 148             
 149             // Restore the System Clock
 150             CLKSEL = CLKSEL_save;
 151             
 152             // Disable (Bypass) the Flash Read one-shot timer if the system clock
 153             // frequency is higher than 10 MHz
 154             if(SYSCLK > 10000000)
 155             {
 156                FLSCL |= BYPASS;                 // Set the one-shot bypass bit                     
 157             }
 158            
 159             // Capture the wake-up source and clear all wake-up source flags   
 160             PMU0CF_snapshot = PMU0CF;
 161             PMU0CF = CLEAR;
 162          
 163             // Capture RTC events that occured while PMU0CF was being cleared
 164             RTC0CN0_snapshot = RTC_Read(RTC0CN0); 
 165          
 166             // If an RTC Alarm occured while PMU0CF was being cleared, clear 
 167             // the PCU0CF flag again   
 168             if(RTC0CN0_snapshot & (ALRM) && ((PMU0CF_snapshot & RTCAWK) == 0))
 169             {
 170                PMU0CF_snapshot |= PMU0CF;
 171                PMU0CF = CLEAR;
 172             }
 173          
 174             //----------------------------------
 175             // Decode Wake-Up Sources
 176             //----------------------------------
 177          
 178             // Check for an RTC Alarm
C51 COMPILER V9.53.0.0   POWER                                                             11/13/2019 15:40:30 PAGE 4   

 179             if((PMU0CF_snapshot & RTCAWK) || (RTC0CN0_snapshot & ALRM))
 180             {
 181                RTC_Alarm = 1;
 182             }
 183             // Check for an RTC Clock Failure
 184             if((PMU0CF_snapshot & RTCFWK) || (RTC0CN0_snapshot & OSCFAIL))
 185             {
 186                RTC_Failure = 1;  
 187             }
 188             // Check for a Port Match Wakeup
 189             if(PMU0CF_snapshot & PMATWK)
 190             {
 191                Port_Match_Wakeup = 1;  
 192             }
 193             // Check for a Comparator Wakeup
 194             if(PMU0CF_snapshot & CMP0WK)
 195             {
 196                Comparator_Wakeup = 1;  
 197             }
 198             
 199             // Restore Interrupt Priorities
 200             IP = IP_save;
 201          
 202             // Restore Interrupt State
 203             IE_EA = EA_save;
 204             
 205             // Check for a reset pin Wakeup
 206             if(PMU0CF_snapshot & RSTWK)
 207             {
 208                // Delay 15uS per datasheet recommendation
 209                for(b = 255; b > 0; b--);
 210             }
 211              
 212          }*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
